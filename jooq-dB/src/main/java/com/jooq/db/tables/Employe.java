/*
 * This file is generated by jOOQ.
*/
package com.jooq.db.tables;


import com.jooq.db.Comm;
import com.jooq.db.tables.records.EmployeRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employe extends TableImpl<EmployeRecord> {

    private static final long serialVersionUID = -321570464;

    /**
     * The reference instance of <code>comm.employe</code>
     */
    public static final Employe EMPLOYE = new Employe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeRecord> getRecordType() {
        return EmployeRecord.class;
    }

    /**
     * The column <code>comm.employe.id</code>.
     */
    public final TableField<EmployeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>comm.employe.name</code>.
     */
    public final TableField<EmployeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>comm.employe.age</code>.
     */
    public final TableField<EmployeRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>comm.employe</code> table reference
     */
    public Employe() {
        this(DSL.name("employe"), null);
    }

    /**
     * Create an aliased <code>comm.employe</code> table reference
     */
    public Employe(String alias) {
        this(DSL.name(alias), EMPLOYE);
    }

    /**
     * Create an aliased <code>comm.employe</code> table reference
     */
    public Employe(Name alias) {
        this(alias, EMPLOYE);
    }

    private Employe(Name alias, Table<EmployeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employe(Name alias, Table<EmployeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Comm.COMM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employe as(String alias) {
        return new Employe(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employe as(Name alias) {
        return new Employe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employe rename(String name) {
        return new Employe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employe rename(Name name) {
        return new Employe(name, null);
    }
}
